plugin-flowmeter

- Dans page Advanced
    * Choisir sensor correspondant au compteur: liste plugins => list devices => list sensors
    * Choisir le sensor
    * Valide rée le device
    * Le Device contient un sensor diff (DT_Number) sur une période + (un sensor total heure, jour, mois, annee ?)
        # Paramètre periode de calcul
        # Parametre formule appliquée 
        # Paramètre unité (si vide celui du datatype)
    
- Au démarrage plugin, lecture ancien compteur
- Gérer remise à zéro compteur
- Toutes les 5mn faire le diff avec compteur precedent, appliquer formule (litre ou M3 ou kwh ou mnn sur 5mn)
- Enregistrer valeur dans sensor

- Dans page Advanced
    * Générer graphe debit par heure sur 30h, par jour sur 32j, par mois sur 14m
    * Ou un seul graphe glissant 
    * Afficher l'unité dans le graphe à partir datatype ou du paramètre
    
    
    
Fonction sql min, max, avg:
---------------------------
A ajouter "func.sum" (from sqlalchemy.sql import func)

src/domogik/common/database.py => def list_sensor_history_filter(self, sid, frm, to, step_used, function_used):
        Fonction appelée par src/domogik/admin/rest => def sensorHistory_from_filter(sid, ftime, ttime, interval, selector):
        
Modif database.py pour ajouter fonction "sum":
----------------------------------------------
dan@hades:common$ pwd
/opt/dmg/domogik/src/domogik/common

For this above REST request selector can be for now "min", "max" or "avg"
   /rest/sensorhistory/id/<id>/from/<tstampFrom>/interval/<interval>/selector/<selector>

Possible to add the selector "sum"
Made these changes in the **src/domogik/common/database.py** file, and it's work.


    $ diff -u database.py.dev database.py                                                                                                        
    --- database.py.dev     2017-05-24 17:41:50.232238000 +0200                                                                                             
    +++ database.py 2017-05-25 00:30:51.456238000 +0200                                                                                                     
    @@ -1126,14 +1126,15 @@                                                                                                                                 
                     self.__raise_dbhelper_exception("'end_date' can't be prior to 'start_date'")                                                           
             else:                                                                                                                                          
                 to = int(time.time())                                                                                                                      
    -        if function_used is None or function_used.lower() not in ('min', 'max', 'avg'):                                                                
    -            self.__raise_dbhelper_exception("'function_used' parameter should be one of : min, max, avg")                                              
    +        if function_used is None or function_used.lower() not in ('min', 'max', 'avg', 'sum'):                                                         
    +            self.__raise_dbhelper_exception("'function_used' parameter should be one of : min, max, avg, sum")                                         
             if step_used is None or step_used.lower() not in ('minute', 'hour', 'day', 'week', 'month', 'year'):                                           
                 self.__raise_dbhelper_exception("'period' parameter should be one of : minute, hour, day, week, month, year")                              
             function = {                                                                                                                                   
                 'min': func.min(SensorHistory.value_num),                                                                                                  
                 'max': func.max(SensorHistory.value_num),                                                                                                  
                 'avg': func.avg(SensorHistory.value_num),
    +            'sum': func.sum(SensorHistory.value_num),
             }
             sql_query = {
                 'minute' : {
    @@ -1219,6 +1220,20 @@
                                 sqlalchemy.asc('year_c')
                             )
                 },
    +            'month' : {
    +                'mysql': self.__session.query(
    +                            func.year(SensorHistory.date), func.month(SensorHistory.date),function[function_used]
    +                        ).group_by(
    +                            func.year(SensorHistory.date), func.month(SensorHistory.date)
    +                        ),
    +                'postgresql': self.__session.query(
    +                            extract('year', SensorHistory.date).label('year_c'), extract('month', SensorHistory.date),function[function_used]
    +                        ).group_by(
    +                            extract('year', SensorHistory.date), extract('month', SensorHistory.date)
    +                        ).order_by(
    +                            sqlalchemy.asc('year_c')
    +                        )
    +            },
                 'year' : {
                     'mysql': self.__session.query(
                                 func.year(SensorHistory.date), function[function_used]
    @@ -1234,7 +1249,7 @@
                             )
                 },
                 'global' : self.__session.query(
    -                            function['min'], function['max'], function['avg']
    +                            function['min'], function['max'], function['avg'], function['sum']
                             )
             }
             if self.get_db_type() in ('mysql', 'postgresql'):
    @@ -1253,7 +1268,8 @@
                     'global_values': {
                         'min': results_global[0],
                         'max': results_global[1],
    -                    'avg': results_global[2]
    +                    'avg': results_global[2],
    +                    'sum': results_global[3]
                     }
                 }
 
 
$ curl -s "http://vesta:40406/rest/sensorhistory/id/235/from/1495576800/interval/hour/selector/sum"
{"values": [[2017, 5, 21, 24, 0, 14.0], [2017, 5, 21, 24, 1, 31.0], [2017, 5, 21, 24, 2, 0.0], [2017, 5, 21, 24, 3, 0.0], [2017, 5, 21, 24, 4, 0.0], [2017, 5, 21, 24, 5, 1.0], [2017, 5, 21, 24, 6, 31.0], [2017, 5, 21, 24, 7, 18.0], [2017, 5, 21, 24, 8, 35.0], [2017, 5, 21, 24, 9, 0.0], [2017, 5, 21, 24, 10, 37.0], [2017, 5, 21, 24, 11, 45.0], [2017, 5, 21, 24, 12, 534.0], [2017, 5, 21, 24, 13, 17.0], [2017, 5, 21, 24, 14, 34.0], [2017, 5, 21, 24, 15, 3.0], [2017, 5, 21, 24, 16, 3.0], [2017, 5, 21, 24, 17, 2.0], [2017, 5, 21, 24, 18, 38.0], [2017, 5, 21, 24, 19, 28.0], [2017, 5, 21, 24, 20, 67.0], [2017, 5, 21, 24, 21, 0.0], [2017, 5, 21, 24, 22, 20.0], [2017, 5, 21, 24, 23, 80.0], [2017, 5, 21, 25, 0, 0.0]], "global_values": {"max": 54.0, "sum": 1038.0, "avg": 0.715368711233632, "min": 0.0}}

$ curl -s "http://hades:40406/rest/sensorhistory/id/209/from/1495490400/interval/day/selector/sum"
{"values": [[2017, 5, 21, 24, 6.0]], "global_values": {"max": 3.0, "sum": 6.0, "avg": 0.038461538461538464, "min": 0.0}}
        
$ curl -s "http://vesta:40406/rest/sensorhistory/id/235/from/1493589600/interval/week/selector/sum"
{"values": [[2017, 18, 8851.0], [2017, 19, 8561.0], [2017, 20, 7746.0], [2017, 21, 3066.0]], "global_values": {"max": 82.0, "sum": 28224.0, "avg": 0.8269315285224575, "min": 0.0}}

$ curl -s "http://vesta:40406/rest/sensorhistory/id/235/from/1483225200/interval/month/selector/sum"
<html><title>500: Internal Server Error</title><body>500: Internal Server Error</body></html>
Manque query "month" dans "src/domogik/common/database.py"  => ajoutée
{"values": [[2017, 3, -22582.0], [2017, 4, 38524.0], [2017, 5, 28795.0]], "global_values": {"max": 6173.0, "sum": 44737.0, "avg": 0.5672317387059554, "min": -29787.0}}
        
        
Calcul sum à partir résultat MQ 'sensor_history.get'
----------------------------------------------------
>>> values = [{"timestamp": 1449216514.0, "value_str": "10", "value_num": 10.0}, {"timestamp": 1449181378.0, "value_str": "20", "value_num": 20.0}, {"timestamp": 1449178485.0, "value_str": "30", "value_num": 30.0}]
>>> values[0]
{'timestamp': 1449216514.0, 'value_str': '10', 'value_num': 10.0}
>>> for value in values:
 print value['value_num']
10.0
20.0
30.0
>>> sum=0
>>> for value in values:
 sum += value['value_num']
>>> sum
60.0


Sum sur 24 heures par heure:
dt0h = (datetime.now() + timedelta(hours=-0)).replace(minute=0, second=0, microsecond=0)
dt30h = (datetime.now() + timedelta(hours=-30)).replace(minute=0, second=0, microsecond=0)
ts30h = int(dt30h.strftime("%s"))
[[ts30h, value], [ts29h, value], ..., [ts1h, value], [ts0h, value]]

Requete MQ pour caculer la somme sur une periode, trop lente. 
